[{"authors":null,"categories":null,"content":"Алмазова Елизавета родилась в 2003 г. в Москве. Закончила школу в 2021 г. и продолжила образование, поступив на направление “Прикладная математика и информатика” в РУДН. Сейчас обучается на первом курсе.\n","date":1653752400,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1653752400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Алмазова Елизавета родилась в 2003 г. в Москве. Закончила школу в 2021 г. и продолжила образование, поступив на направление “Прикладная математика и информатика” в РУДН. Сейчас обучается на первом курсе.","tags":null,"title":"Алмазова Елизавета","type":"authors"},{"authors":["Алмазова Елизавета"],"categories":["языки","наука","пост"],"content":"Научное программирование Изначально программирование предназначалось для решения именно научных и инженерных задач. Но с развитием вычислительной техники задачи, которые решались с помощью компьютеров, стали значительно шире. В настоящее время офисное программирование, программирование компьютерных игр, поисковые системы, компьютерная графика, базы данных - далеко не полный спектр решаемых на компьютерах задач. Программирование этих и многих других задач существенно отличается от программирования научных расчетов. Поэтому имеет смысл выделять научное программирование, как отдельный стиль программирования.\nЧто значит научное программирование? Прежде всего, научное программирование должно быть ориентировано на эффективное и корректное решение поставленной задачи. Можно возразить, что эти требования предъявляются ко всем программным средствам. Однако вопрос в приоритете критериев. Скажем, если офисная программа будет работать не 0,25 секунд, а 1 секунду для обработки операции, то это не так критично, как скажем проведение расчета в течение недели или месяца. Тоже самое и на счет корректности выполнения программы. Одно дело, когда “зависнет” компьютерная игра, и совсем другое дело, если в ходе вычислений будет ошибка, которая приведет к неверным выводам или технологическим катастрофам.\nПриведем некоторые моменты, которые следует иметь в виду, приступая к программированию научных задач.\n  Отделение научной части от интерфейсной. Мы призываем придерживаться правила: одна программа производит численный расчет, сохраняя результаты расчета, а другая программа осуществляет визуализацию полученных данных.\n  Оптимизация текстов программ. Очень часто небольшое изменение в тексте программы позволяет кардинально увеличить скорость расчетов. Оптимизирующий компилятор не всесилен.\n  Не использовать внешние подпрограммы и библиотеки. За исключением особых случаев старайтесь программировать используемые алгоритмы сами. Во-первых, это даст исчерпывающее понимание самого численного метода, а, во-вторых, реализуя “для себя” можно добиться наилучшего результата.\n  Жертвуйте универсальностью в угоду эффективности. Универсальность одно из самых любимых достижений программирования, но для научного программирования построение универсальных программных комплексов оправдано не всегда.\n  Используйте современные компиляторы. Далеко не все можно оптимизировать “руками” - современные оптимизирующие компиляторы могут серьезно увеличить скорость.\n  Обсудим вопрос выбора языка программирования. Мы в нашем курсе систематически используем язык C#. Издавна языком для научных расчетов являлся Фортран. Действительно, этот язык имеет много преимуществ, но еще больше недостатков. Таких как:\n  Язык старого поколения. Этот язык был разработан на заре компьютерной эры, поэтому многие важные технологии программирования, такие как модульность, контроль типов и др. в нем не реализованы. Что приводит к ошибкам и трудностям при программировании.\n  Многие библиотеки подпрограмм уже устарели. Прогресс в компьютерной сфере происходит крайне быстро. Поэтому библиотеки разработаны для устаревших ЭВМ могут быть бесполезны.\n  Отсутствие мобильности. Не смотря на существующие стандарты языка, конкретные реализации этого языка существенно отличаются.\n  Выбор языка C# мотивируется следующими факторами:\n  Современный язык. Программирование это та область, в которой прогресс происходит очень быстро. Язык C# с одной стороны вобрал в себя лучшие черты языков C++ и Java, а с другой был создан без необходимости поддерживать совместимость с предыдущими версиями\n  Мощность платформы .NET. Язык C# является основным языком платформы .NET, поэтому при программировании на C# вы программируете также и на платформе .NET, которая предоставляет вам мощные, хорошо продуманные классы.\n  Эффективность языка. Как ни странно, но программы, написанные на C#, выполняемые на .NET, являются очень эффективно выполняемыми приложениями. Однако, при разработке сложных программ следует учитывать не только скорость выполнения программы, но и скорость разработки программы, а также сложность дальнейшей модификации. По этому параметру язык C# значительно превосходит классический язык C++.\n  ","date":1653752400,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653752400,"objectID":"cb514bfcc7e97980857a61f64cb6d30a","permalink":"https://example.com/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/","publishdate":"2022-05-28T15:40:00Z","relpermalink":"/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/","section":"post","summary":"Необходимая теория по теме языков научного программирования","tags":["языки","наука","пост"],"title":"Языки научного программирования","type":"post"},{"authors":["Алмазова Елизавета"],"categories":["неделя","пост"],"content":"Обзор Учебная неделя прошла как обычно. В моей группе согласно расписанию прошли занятия по математической логике, математическому анализу, операционным системам, физкультуре и английскому языку.\n","date":1653751800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653751800,"objectID":"e7102433becee65d9f75697520916ee1","permalink":"https://example.com/ru/post/23-27-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","publishdate":"2022-05-28T15:30:00Z","relpermalink":"/ru/post/23-27-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","section":"post","summary":"Пост по прошедшей неделе (23-27 мая, 2022 г.)","tags":["неделя","пост"],"title":"23-27 мая, 2022 г.","type":"post"},{"authors":null,"categories":null,"content":"Цель данного индивидуального проекта - поэтапное создание и заполнение сайта, представляющего меня как научного работника.\nСтатический генератор сайта — программа, которая из различных исходных файлов (картинок, шаблонов в разных форматах, текстовых файлов и т.п) генерирует статический HTML-сайт. Один из ярких представителей — Hugo. Hugo — один из самых популярных генераторов статических сайтов с открытым исходным кодом, написан на языке Go. Благодаря своей удивительной скорости и гибкости, Hugo делает создание веб-сайтов увлекательным. Он подойдет как для создания лендингов, «многостраничников» — так и для создания более сложных продуктов: блог, новостной портал и даже интернет-магазин. Установить фреймворк можно практически на любую современную платформу в несколько команд.\nФреймворк имеет очень хорошую документацию. Она доступна только на английском языке. Информация очень хорошо структурирована, что позволяет освоить данную технологию, за несколько дней. Для лучшего восприятия, практически в каждой главе есть обучающее видео от разработчиков. Все это позволяет очень быстро приступить к созданию собственных сайтов.\nОсновной контент или содержимое сайта хранится в формате .md в папке content. В роли контента могут выступать статьи, новости, продукты интернет магазина и прочее. Каталог «data» используется для хранения файлов конфигурации, которые Hugo может использовать при создании веб-сайта. Можно записать эти файлы в формате YAML, JSON или TOML.\nHugo имеет около 200 готовых тем, которые можно легко установить и использовать. Это значительно ускоряет процесс разработки. Темы включают в себя не только отличные дизайнерские, но и хорошие программные решения. Wowchemy предлагает удобный шаблон для создания сайта научного работника и не только, узнать больше можно на их официальном сайте.\n","date":1653751800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653751800,"objectID":"c2e05dfe59ab1cd442973d4859d22f6b","permalink":"https://example.com/ru/project/%D1%81%D0%B0%D0%B8%D1%82/","publishdate":"2022-05-28T15:30:00Z","relpermalink":"/ru/project/%D1%81%D0%B0%D0%B8%D1%82/","section":"project","summary":"Создание сайта, представляющего меня как научного работника","tags":["Сайт"],"title":"Персональный сайт","type":"project"},{"authors":["Алмазова Елизавета"],"categories":["неделя","пост"],"content":"Обзор Эта учебная неделя прошла как обычно. В моей группе согласно расписанию прошли занятия по математической логике, математическому анализу, операционным системам, физкультуре и английскому языку.\n","date":1653144000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653144000,"objectID":"e684f3e01d6ccce6a1e524745e48370b","permalink":"https://example.com/ru/post/16-20-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","publishdate":"2022-05-21T14:40:00Z","relpermalink":"/ru/post/16-20-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","section":"post","summary":"Пост по прошедшей неделе (16-20 мая, 2022 г.)","tags":["неделя","пост"],"title":"16-20 мая, 2022 г.","type":"post"},{"authors":["Алмазова Елизавета"],"categories":["отчет","оформление","пост"],"content":"Структура отчетов Согласно ГОСТ 7.32-2001, любая научно-исследовательская работа должна обязательно содержать следующие элементы:\n титульный лист; реферат; введение; основную часть; заключение.  Также ГОСТ рекомендует включить в работу и такие элементы:\n список исполнителей; содержание; нормативные ссылки; определения; обозначения и сокращения; список использованных источников; приложения.  Содержание элементов отчета  Титульный лист. Первый лист работы оформляется строго по образцу, который обычно приводится в методических пособиях по вашему предмету. В нем не просто требуется указать такие элементы, как название образовательного учреждения, вид работы и сведения об исполнителе, но и расположить их в строгом соответствии со стандартами. Реферат. Реферат фактически является кратким представлением всего вашего отчета и содержит ряд статистических сведений. В нем нужно указать количество частей, страниц работы, иллюстраций, приложений, таблиц, использованных литературных источников и приложений. Здесь же приводится перечень ключевых слов работы и собственно текст реферата. Последний подразумевает основные элементы работы от поставленных целей до результатов и рекомендаций по их внедрению. Введение. Во введении типовой лабораторной работы обычно прописывают цели проводимого исследования и задачи, выполнение которых поможет достичь поставленных целей. В некоторых случаях пишется развернутое введение с доказательством актуальности и новизны изучаемой темы. Тогда во введении понадобится привести оценку современного состояния рассматриваемой проблемы и обосновать необходимость ее решения. Основная часть. Важно, чтобы в этом разделе работы была отражена ее суть, описана методика и результаты проделанной работы. В основной части прописывают следующие элементы:  цели проводимого исследования; задачи, выполнение которых поможет достичь поставленных целей; ход работы, в котором описываются выполненные действия; прочие разделы, предусмотренные методическими материалами по изучаемой дисциплине.   Заключение. В этой части работы потребуется сделать выводы по полученным в ходе лабораторной работы результатам. Для этого оцените, насколько полно выполнены поставленные задачи. В сложных работах могут присутствовать и другие элементы, например, рекомендации для дальнейшего применения результатов проведённой работы.  ","date":1653144000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1653144000,"objectID":"6f5eac303fee4626e59407b7f9b32f3a","permalink":"https://example.com/ru/post/%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BE%D1%82%D1%87%D0%B5%D1%82%D0%B0/","publishdate":"2022-05-21T14:40:00Z","relpermalink":"/ru/post/%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BE%D1%82%D1%87%D0%B5%D1%82%D0%B0/","section":"post","summary":"Необходимая теория по теме оформления отчета","tags":["отчет","оформление","пост"],"title":"Оформление отчета","type":"post"},{"authors":["Алмазова Елизавета"],"categories":["неделя","пост"],"content":"Обзор 9 мая я отмечала День Победы. В связи с этим праздником и 10 мая тоже было выходным днем. С 11 мая началась обычная учебная неделя.\n","date":1652452200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652452200,"objectID":"2986da01a759168d996f8853be5fd6dd","permalink":"https://example.com/ru/post/9-13-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","publishdate":"2022-05-13T14:30:00Z","relpermalink":"/ru/post/9-13-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","section":"post","summary":"Пост по прошедшей неделе (9-13 мая, 2022 г.)","tags":["неделя","пост"],"title":"9-13 мая, 2022 г.","type":"post"},{"authors":["Алмазова Елизавета"],"categories":["markdown","пост"],"content":"Основная информация Markdown — удобочитаемый язык разметки, который прозрачно конвертируется в HTML. Его можно открывать и изменять в любом редакторе текста. Широко используется для написания документаций и README-файлов. Вы можете встретить Markdown в .md или .markdown файлах. Несмотря на то, что Markdown достаточно удобно читать в исходном виде, его часто переводят в HTML.\nИспользование языка разметки Markdown  Параграф это одна или несколько подряд идущих строчек текста, отделённых одной или несколькими пустыми строчками. Если строка содержит только пробелы или табы, то она всё равно считается пустой. Подряд идущие строчки будут склеены в одну, если не добавить жёсткий перенос. Существует несколько способов как это можно сделать: добавить два (или больше) пробелов в конце строки \u0026lt;пробел\u0026gt;\u0026lt;пробел\u0026gt;, добавить обратную косую черту в конце строки , добавить HTML тег переноса строки ; Чтобы создать заголовок, используйте знак #; Чтобы задать для текста полужирное начертание, заключите его в двойные звездочки, курсивное - одинарные, полужирное и курсивное - тройные; Блоки цитирования создаются с помощью символа \u0026gt;; Неупорядоченный список создается с помощью тире или звездочек, а нумерованный - с помощью цифр. Для вложенных списков используются отступы; Синтаксис Markdown для встроенной ссылки состоит из части [link text] , представляющей текст гиперссылки, и части (file-name.md) – URL-адреса или имени файла, на который дается ссылка; Markdown поддерживает как встраивание фрагментов кода в предложение, так и их размещение между предложениями в виде отдельных огражденных блоков. Огражденные блоки кода — это простой способ выделить синтаксис для фрагментов кода.  ","date":1652452200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1652452200,"objectID":"ba2dc0057a2515a60f666018f48b00ee","permalink":"https://example.com/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/","publishdate":"2022-05-13T14:30:00Z","relpermalink":"/ru/post/%D1%8F%D0%B7%D1%8B%D0%BA-%D1%80%D0%B0%D0%B7%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-markdown/","section":"post","summary":"Необходимая теория по языку разметки Markdown","tags":["markdown","пост"],"title":"Язык разметки Markdown","type":"post"},{"authors":["Алмазова Елизавета"],"categories":["git","пост"],"content":"Системы контроля версий Системы контроля версий – это программное обеспечение для облегчения работы над изменяющейся информацией, которое часто применяют при работе нескольких человек над одним проектом. Они позволяют фиксировать изменения в файлах и кто их внес, отслеживать и разрешать возникающие конфликты: производить откат, совмещать изменения, сделанные разными участниками, заблокировать файлы для изменения и вручную выбрать версию файлов. Также они могут иметь и дополнительные функции, например, поддержка работы с несколькими версиями путем сохранения общей истории изменений до точки ветвления и собственные истории каждой ветви. Обычно основное дерево проекта хранится в локальном или удаленном репозитории, к которому настроен доступ для участников проекта. В классических системах используется централизованная модель, т.е. файлы хранятся в едином репозитории. Большинство функций по управлению версиями выполняется специальным сервером. Пользователь перед началом работы с помощью команд получает нужную версию файлов. После внесения изменений он размещает новую версию в хранилище. При этом предыдущие версии удалять не будут, к ним можно вернуться в любой момент. Сервер также может сохранять не полную версию измененных файлов, а производить дельта-компрессию, т.е. сохранять только изменения между последовательными версиями, уменьшая объем хранимых данных. В распределенных системах центральный репозиторий не является обязательным.\nЗадачи, решаемые VCS  Обеспечение командной и распределенной работы над проектом без специального инструментария, предоставление возможности изменять файлы, не мешая работе других пользователей; Сохранение исходного кода, хранение всех предыдущих версий или, для уменьшения объема, изменений между последовательными версиями; Ведение журнала изменений: кто из участников, когда и какие изменения внес, причем доступ к нему можно ограничить; Отслеживание и разрешение конфликтов, возникающих при работе нескольких человек над одним проектом; Автоматическое или ручное объединение (совмещение) изменений; Ручной выбор нужной версии; Откат изменений; Настраиваемая блокировка файлов для изменения, предоставление привилегированного доступа только одному пользователю, работающему с файлом; Поддержка работы с несколькими версиями одного файла, сохранение общей истории изменений до точки ветвления версий и собственные изменения каждой ветви.  Основные команды git  Создание основного дерева репозитория – git init; Получение обновлений текущего дерева из центрального репозитория – git pull; Отправка произведенных изменений локального дерева в центральный репозиторий – git push; Просмотр списка измененных файлов в текущей директории – git status; Просмотр текущих изменений – git diff; Сохранение текущих изменений – git add . (все изменения)/git add [имена файлов] (некоторые изменения); Удаление из индекса репозитория – git rm [имена файлов]; Сохранение добавленных изменений – git commit –am ‘Комментарий’/git commit (внесение комментария будет через встроенный редактор); Создание новой ветки, базирующейся на текущей – git checkout –b [имя ветки]; Переключение на некоторую ветку – git checkout [имя ветки]; Отправка изменений конкретной ветки в центральный репозиторий – git push origin [имя ветки]; Слияние ветки с текущим деревом – git merge –no-ff [имя ветки]; Удаление ветки – git branch –d [имя ветки] (удаление локальной ветки, уже слитой с основным деревом)/git branch –D [имя ветки] (принудительное удаление локальной ветки)/ git push origin: [имя ветки] (удаление ветки с центрального репозитория); Проверка, на какой ветке находится пользователь – git branch; Завершение работы на ветке – git flow \u0026lt;ветка\u0026gt; finish; Инициализация структуры git-flow в репозитории – git flow init; Создание функциональной ветки – git flow feature start feature_branch; Окончание работы с функциональной веткой – git flow feature finish feature_branch; Создание ветки выпуска – git flow release start 1.0.0; Окончание работы с веткой выпуска – git flow release finish 1.0.0; Создание ветки исправления – git flow hotfix start hotfix_branch; Окончание работы с веткой исправления – git flow hotfix finish hotfix_branch.  ","date":1651876200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651876200,"objectID":"70c6171c18556694b1fe37a8e40e0f46","permalink":"https://example.com/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git/","publishdate":"2022-05-06T22:30:00Z","relpermalink":"/ru/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git/","section":"post","summary":"Необходимая теория по теме управления версиями","tags":["git","пост"],"title":"Управление версиями. Git","type":"post"},{"authors":["Алмазова Елизавета"],"categories":["неделя","пост"],"content":"Обзор 2 мая было выходным днем из-за переноса праздничного дня 1 мая: в этот день отмечается Праздник Весны и Труда. С 3 мая началась обычная учебная неделя.\n","date":1651875600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1651875600,"objectID":"7bc6c748c4ba09c6d971f69b807af28b","permalink":"https://example.com/ru/post/2-6-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","publishdate":"2022-05-06T22:20:00Z","relpermalink":"/ru/post/2-6-%D0%BC%D0%B0%D1%8F-2022-%D0%B3/","section":"post","summary":"Пост по прошедшей неделе (2-6 мая, 2022 г.)","tags":["неделя","пост"],"title":"2-6 мая, 2022 г.","type":"post"}]