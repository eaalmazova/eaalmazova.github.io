[{"authors":null,"categories":null,"content":"Almazova Elizaveta was born in 2003 in Moscow. Graduated from school in 2021 and continued education by entering the course of Applied Mathematics and Informatics in RUDN University. At the moment is a first-year student.\n","date":1653144000,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653144000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Almazova Elizaveta was born in 2003 in Moscow. Graduated from school in 2021 and continued education by entering the course of Applied Mathematics and Informatics in RUDN University. At the moment is a first-year student.","tags":null,"title":"Almazova Elizaveta","type":"authors"},{"authors":null,"categories":null,"content":"The purpose of this individual project is the gradual creation and filling of a site that represents me as a researcher.\nA static site generator is a program that generates a static HTML site from various source files (pictures, templates in different formats, text files, etc.). One of the brightest representatives is Hugo. Hugo is one of the most popular open source static site generators written in the Go language. With its amazing speed and flexibility, Hugo makes website building fun. It is suitable both for creating landing pages, “multi-pages” and for creating more complex products: a blog, a news portal, and even an online store. You can install the framework on almost any modern platform in a few commands.\nThe framework has very good documentation. It is only available in English. The information is very well structured, which allows you to master this technology in a few days. For a better understanding, almost every chapter has a tutorial video from the developers. All this allows you to quickly start creating your own sites.\nThe main content or site content is stored in .md format in the content folder. Content can be articles, news, online store products, and more. The “data” directory is used to store configuration files that Hugo can use when building a website. You can write these files in YAML, JSON, or TOML format.\nHugo has about 200 ready-made themes that are easy to install and use. This greatly speeds up the development process. Themes include not only great design, but also good software solutions. Wowchemy offers a handy template for creating a website for a scientist and not only, you can find out more on their official website.\n","date":1653751800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653751800,"objectID":"00972a7ba9a547cc7f2819b02e687bd2","permalink":"https://example.com/en/project/website/","publishdate":"2022-05-28T15:30:00Z","relpermalink":"/en/project/website/","section":"project","summary":"Creating a website introducing me as a scientist","tags":["Сайт"],"title":"Personal website","type":"project"},{"authors":["Almazova Elizaveta"],"categories":["markdown","post"],"content":"Basic information Markdown is a human-readable markup language that converts transparently to HTML. It can be opened and modified in any text editor. Widely used for writing documentation and README files. You may see Markdown in .md or .markdown files. Although Markdown is reasonably readable in its original form, it is often translated into HTML.\nUsing the Markdown language  A paragraph is one or more consecutive lines of text separated by one or more empty lines. If a line contains only spaces or tabs, then it is still considered empty. Lines running in a row will be glued into one, if you do not add a hard transfer. There are several ways to do this: add two (or more) spaces at the end of the line , add a backslash at the end of the line , add an HTML line break tag ; To create a header, use the # sign; To make text bold, enclose it in double asterisks, italic in single asterisks, bold and italic in triple asterisks; Citation blocks are created using the \u0026gt; symbol; An unordered list is created using dashes or asterisks, and a numbered list is created using numbers. Nested lists are indented; The Markdown syntax for an embedded link consists of a [link text] part representing the text of the hyperlink, and a (file-name.md) part representing the URL or file name to which the link is given; Markdown supports both embedding code snippets in a sentence, and placing them between sentences as separate fenced blocks. Guarded code blocks are an easy way to highlight syntax for code snippets.  ","date":1653144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653144000,"objectID":"0b99b56b18f63edfce9c608d0bdc5901","permalink":"https://example.com/en/post/markup-language-markdown/","publishdate":"2022-05-21T14:40:00Z","relpermalink":"/en/post/markup-language-markdown/","section":"post","summary":"Compulsory theory on the topic of markup language Markdown","tags":["markdown","post"],"title":"Markup language Markdown","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["report","decoration","post"],"content":"Report structure According to GOST 7.32-2001, any research work must contain the following elements:\n title page; essay; introduction; the main part; conclusion.  GOST also recommends that the following elements be included in the work:\n list of performers; content; Normative references; definitions; designations and abbreviations; list of sources used; applications.  Contents of report elements  Title page. The first sheet of work is drawn up strictly according to the model, which is usually given in teaching aids for your subject. It not only requires specifying such elements as the name of the educational institution, type of work and information about the performer, but also arrange them in strict accordance with the standards. Abstract. The abstract is actually a summary of your entire report and contains a number of statistical information. It must indicate the number of parts, pages of work, illustrations, applications, tables, used literary sources and applications. Here is a list of key words of the work and the actual text of the abstract. The latter implies the main elements of the work from the set goals to the results and recommendations for their implementation. Introduction. In the introduction of a typical laboratory work, the goals of the research being conducted and the tasks that will help achieve the goals are usually prescribed. In some cases, a detailed introduction is written with proof of the relevance and novelty of the topic under study. Then in the introduction it will be necessary to give an assessment of the current state of the problem under consideration and justify the need to solve it. Main part. It is important that this section of the work reflects its essence, describes the methodology and results of the work done. The main part contains the following elements: the purpose of the study; tasks, the implementation of which will help achieve the goals; a workflow that describes the actions performed; other sections provided for by methodological materials on the discipline under study. Conclusion. In this part of the work, it will be necessary to draw conclusions based on the results obtained during the laboratory work. To do this, evaluate how well the tasks have been completed. Complex works may contain other elements, for example, recommendations for further application of the results of the work carried out.  ","date":1653144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653144000,"objectID":"a55286dcfce76d29b2fe05e8fd6c97c0","permalink":"https://example.com/en/post/report-decoration/","publishdate":"2022-05-21T14:40:00Z","relpermalink":"/en/post/report-decoration/","section":"post","summary":"Compulsory theory on the topic of report decoration","tags":["report","decoration","post"],"title":"Report Decoration","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["languages","science","post"],"content":"Scientific programming Initially, programming was intended to solve precisely scientific and engineering problems. But with the development of computer technology, the tasks that were solved with the help of computers became much wider. At present, office programming, computer game programming, search engines, computer graphics, databases are far from the full range of tasks that can be solved on computers. The programming of these and many other problems differs significantly from the programming of scientific calculations. Therefore, it makes sense to single out scientific programming as a separate style of programming.\nWhat does scientific programming mean? First of all, scientific programming should be focused on the efficient and correct solution of the problem. It can be argued that these requirements apply to all software. However, the issue is the priority of the criteria. Let’s say, if the office program will work not 0.25 seconds, but 1 second to process the operation, then this is not as critical as, say, the calculation is carried out within a week or a month. The same goes for the correctness of program execution. It’s one thing when a computer game “freezes”, and it’s quite another thing if there is an error in the course of calculations that will lead to incorrect conclusions or technological disasters.\nHere are some points that should be kept in mind when starting to program scientific problems.\n  Separation of the scientific part from the interface. We urge you to adhere to the rule: one program performs a numerical calculation, saving the results of the calculation, and another program visualizes the received data.\n  Optimization of program texts. Very often, a small change in the text of the program can dramatically increase the speed of calculations. The optimizing compiler is not omnipotent.\n  Do not use external routines and libraries. Except in special cases, try to program the algorithms you use yourself. Firstly, it will give an exhaustive understanding of the numerical method itself, and, secondly, by implementing “for yourself” you can achieve the best result.\n  Sacrifice versatility for efficiency. Universality is one of the most beloved achievements of programming, but for scientific programming, the construction of universal software systems is not always justified.\n  Use modern compilers. Not everything can be optimized “by hand” - modern optimizing compilers can seriously increase the speed.\n  Let’s discuss the issue of choosing a programming language. We systematically use the C# language in our course. For a long time Fortran has been the language for scientific calculations. Indeed, this language has many advantages, but even more disadvantages. Such as:\n  The language of the old generation. This language was developed at the dawn of the computer age, so many important programming technologies such as modularity, type checking, etc. are not implemented in it. Which leads to errors and difficulties in programming.\n  Many libraries of routines are already obsolete. Progress in the computer field is extremely fast. Therefore libraries developed for obsolete computers may be useless.\n  Lack of mobility. Despite the existing language standards, specific implementations of this language differ significantly.\n  The choice of the C# language is motivated by the following factors:\n  Modern language. Programming is an area where progress is very fast. On the one hand, the C# language incorporates the best features of the C++ and Java languages, and on the other hand, it was created without the need to maintain compatibility with previous versions.\n  The power of the .NET platform. C# is the primary language of the .NET platform, so when you’re programming in C#, you’re also programming in .NET, which provides you with powerful, well-designed classes.\n  The effectiveness of the language. Oddly enough, programs written in C# that run on .NET are very efficient applications. However, when developing complex programs, one should take into account not only the speed of program execution, but also the speed of program development, as well as the complexity of further modification. In this parameter, the C# language is significantly superior to the classic C++ language.\n  ","date":1653144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653144000,"objectID":"2bf52bffa522fea851f3e6de8933fa3f","permalink":"https://example.com/en/post/scientific-programming-languages/","publishdate":"2022-05-21T14:40:00Z","relpermalink":"/en/post/scientific-programming-languages/","section":"post","summary":"Compulsory theory on the topic of scientific programming languages","tags":["languages","science","post"],"title":"Scientific Programming Languages","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["git","post"],"content":"Version control systems Revision control systems are software that facilitates the management of changing information and is often used when multiple people are working on the same project. They allow you to commit changes to files and who made them, track and resolve conflicts that arise: rollback, combine changes made by different contributors, lock files for changes, and manually select a file version. They can also have additional features, such as support for working with multiple versions by maintaining a common change history up to the branch point, and each branch’s own history. Typically, the main project tree is stored in a local or remote repository that is configured to be shared with project members. In classical systems, a centralized model is used, i.e. files are stored in a single repository. Most version control functions are performed by a dedicated server. Before starting work, the user receives the required version of the files using commands. After making the changes, it commits the new version to the repository. At the same time, previous versions will not be deleted, you can return to them at any time. The server can also save not the full version of the modified files, but perform delta compression, i.e. save only changes between successive versions, reducing the amount of data stored. In distributed systems, a central repository is optional.\nTasks solved by VCS  Ensuring team and distributed work on the project without special tools, providing the ability to change files without interfering with the work of other users; Preservation of the source code, storage of all previous versions or, to reduce the volume, changes between successive versions; Keeping a log of changes: which of the participants, when and what changes were made, and access to it can be limited; Tracking and resolving conflicts that arise when several people work on one project; Automatic or manual association (combination) of changes; Manual selection of the desired version; Rollback changes; Customizable blocking of files for modification, granting privileged access to only one user working with the file; Support for working with multiple versions of the same file, keeping a common history of changes up to the branching point of the versions, and own changes for each branch.  Basic git commands  Creation of the main repository tree - git init; Getting updates of the current tree from the central repository - git pull; Sending the changes made to the local tree to the central repository - git push; View the list of changed files in the current directory - git status; View current changes - git diff; Saving current changes - git add . (all changes) / git add [filenames] (some changes); Removal from the repository index - git rm [filenames]; Saving the added changes - git commit -am ‘Comment’ / git commit (the comment will be made through the built-in editor); Create a new branch based on the current one - git checkout -b [branch name]; Switching to some branch - git checkout [branch name]; Sending changes to a specific branch to the central repository - git push origin [branch name]; Merging a branch with the current tree - git merge -no-ff [branch name]; Deleting a branch - git branch -d [branch name] (deleting a local branch already merged into the main tree) / git branch -D [branch name] (forced deletion of a local branch) / git push origin: [branch name] (deleted a branch from the central repository); Checking which branch the user is on - git branch; Completion of work on the branch - git flow  finish; Initialization of the git-flow structure in the repository - git flow init; Creation of a feature branch - git flow feature start feature_branch; End of work with a feature branch - git flow feature finish feature_branch; Creating a release branch - git flow release start 1.0.0; End of work with the release branch - git flow release finish 1.0.0; Creating a hotfix branch - git flow hotfix start hotfix_branch; Finish hotfix branch - git flow hotfix finish hotfix_branch.  ","date":1653144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653144000,"objectID":"eb41a5f9bda0ac6b1c57589db542629d","permalink":"https://example.com/en/post/version-control.-git/","publishdate":"2022-05-21T14:40:00Z","relpermalink":"/en/post/version-control.-git/","section":"post","summary":"Compulsory theory on the topic of version control","tags":["git","post"],"title":"Version Control. Git","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["week","post"],"content":"Обзор This study week has passed as always. My group had classes of mathematical logic, calculus, operation systems, physical education and english language according to the schedule.\n","date":1651875600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651875600,"objectID":"f7c4af6ea0871f7bb8a3a351fe3a7dc3","permalink":"https://example.com/en/post/16-20-may-2022/","publishdate":"2022-05-06T22:20:00Z","relpermalink":"/en/post/16-20-may-2022/","section":"post","summary":"Passing week post (16-20 May, 2022.)","tags":["week","post"],"title":"16-20 May, 2022.","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["week","post"],"content":"Обзор The second of May was a holiday because of moving the holiday on the first of May: this day is the International Workers’ Day. An ordinary study week started on the third of May.\n","date":1651875600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651875600,"objectID":"8c029aaaa5b33fcddadaf9f78a47d021","permalink":"https://example.com/en/post/2-6-may-2022/","publishdate":"2022-05-06T22:20:00Z","relpermalink":"/en/post/2-6-may-2022/","section":"post","summary":"Passing week post (2-6 May, 2022.)","tags":["week","post"],"title":"2-6 May, 2022.","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["week","post"],"content":"Обзор This study week has passed as always. My group had classes of mathematical logic, calculus, operation systems, physical education and english language according to the schedule.\n","date":1651875600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651875600,"objectID":"2e55b8d1534a5e45f0405c86e18368f6","permalink":"https://example.com/en/post/23-27-may-2022/","publishdate":"2022-05-06T22:20:00Z","relpermalink":"/en/post/23-27-may-2022/","section":"post","summary":"Passing week post (23-27 May, 2022.)","tags":["week","post"],"title":"23-27 May, 2022.","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["week","post"],"content":"Обзор This study week has passed as always. My group had classes of mathematical logic, calculus, operation systems, physical education and english language according to the schedule.\n","date":1651875600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651875600,"objectID":"b398533be57b080fe7170d7948bf4abc","permalink":"https://example.com/en/post/30-may-3-june-2022/","publishdate":"2022-05-06T22:20:00Z","relpermalink":"/en/post/30-may-3-june-2022/","section":"post","summary":"Passing week post (30 May - 03 June, 2022.)","tags":["week","post"],"title":"30 May - 03 June, 2022.","type":"post"},{"authors":["Almazova Elizaveta"],"categories":["week","post"],"content":"Обзор On the ninth of May I celebrated the Victory Day. Due to this holiday the tenth of May was a holiday too. An ordinary study week started on the 11 of May.\n","date":1651875600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651875600,"objectID":"bc5a29d6d4f746f43cb426e6088b0bd4","permalink":"https://example.com/en/post/9-13-may-2022/","publishdate":"2022-05-06T22:20:00Z","relpermalink":"/en/post/9-13-may-2022/","section":"post","summary":"Passing week post (9-13 May, 2022.)","tags":["week","post"],"title":"9-13 May, 2022.","type":"post"}]